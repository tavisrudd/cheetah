Cheetah TODO list
-----------------

* If you are working on a task please put your initials at the end of the
  description

* When a task is completed please remember to note it in the CHANGES file

Languague Specification
================================================================================

- revisit parsed #include directives.  Are they necessary at all??
  (This is a rhetorical question.  They are necessary.  However, the
  Users' Guide needs better examples about when and when not to use
  #include.  Also, consider making '#include' do a raw include, and
  something else do a parsed include ('#include parsed', '#include cheetah'?),
  so that users get parsing only if they explicitly request it.

- write a formalized grammar for Cheetah in BNF 

Implementation
================================================================================

- implement some better error handling for misformed #for, #if, #try directives,
  etc.  At the moment these errors are not caught until Python executes the
  code.

- create better error message for bad code such as:
  ##cache
  This is a cached region.  $voom
  #end cache

- fix bug in Parser.getDefArgList() that is mucking up lists where the comma has
  been forgotten:

  > #cache timer='.5m' id='cache1'
  > This is a cached region.  $voom
  > #end cache
  > 
  > the error is:
  > 
  > "/local/opt/Python/lib/python2.2/site-packages/Webware/Cheetah/Compiler.py",
  > line 102, in genCacheInfoFromArgList
  >     val = self.genTimeInterval(val)
  >   File
  > "/local/opt/Python/lib/python2.2/site-packages/Webware/Cheetah/Compiler.py",
  > line 75, in genTimeInterval
  >     interval = float(timeString)*60
  > ValueError: invalid literal for float(): .5m' id'cache1
  > 
  > 
  > Running under pdb shows that Parser.getDefArgList() returned:
  > "30m' id'cache1" .


- finish the #cache directive's varyBy keyword (tied to Tavis' proposed caching
  framework for Webware)

- Remove the -w option from 'cheetah compile'.  New command 'cheetah fill'
  replaces the -w switch and more: it fills the template into *.html, another
  extension or stdout.  It accepts the -R (recurse), -p (to stdout) and 
  -v (verbose) options of 'cheetah compile', and the '-e/--env' and 
  '-p/--pickle' options of .py template modules.  Note the conflict between
  -p (stdout) and -p (pickle); we'll have to rename -p (stdout) to something
  else, both in 'cheetah fill' and 'cheetah compile'.

- Delete whitespace before comments.  If the rest of the line consists
  of only non-outputting directives and whitespace, delete the line from the
  output.  The only outputting directives I see are #echo, #block and
  #include. -- MO

- 'python setup.py uninstall'.  This may require hacking an uninstall feature
  into distutils.


Test Suite
================================================================================
- test cases for the SkeletonPage framework
- add cases that test the cheetah-compile script
- add cases that test the integration with WebKit.  Since these must be called
  from a running WebKit server, make a servlet that runs the tests and outputs
  diagnostics to the browser.

Documentation
================================================================================
- more examples in the Webware section (MO)
- more examples/advice all over the Users' Guide about recommended/
  non-recommended strategies (MO)
- developers' guide (MO)
- beginners guide
- quick reference for template maintainers (MO - someday)
- HOWTOs (somebody offered to make some)

Website
================================================================================
- automate the documentation update 
- See if we can get WebKit working on Sourceforge...

Examples
================================================================================
- create some non-html code generation examples
  - SQL
  - LaTeX
  - form email
- Template definitions in a database.  .py template modules in a 
  database?  Caching template classes and/or instances extracted from
  a database.
- Pickled templates?

