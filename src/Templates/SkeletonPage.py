#!/usr/bin/env python

"""A Skeleton HTML page template, that provides basic structure and utility methods.

Autogenerated by CHEETAH: The Python-Powered Template Engine
 CHEETAH VERSION: 0.9.14
 Generation time: Mon Jul 29 15:43:07 2002
   Source file: SkeletonPage.tmpl
   Source file last modified: Mon Jul 29 15:36:49 2002
"""

__CHEETAH_genTime__ = 'Mon Jul 29 15:43:07 2002'
__CHEETAH_src__ = 'SkeletonPage.tmpl'
__CHEETAH_version__ = '0.9.14'

##################################################
## DEPENDENCIES

import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.Templates._SkeletonPage import _SkeletonPage

##################################################
## MODULE CONSTANTS

try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFS=valueFromSearchList
VFN=valueForName
currentTime=time.time

##################################################
## CLASSES

class SkeletonPage(_SkeletonPage):
    """
    
    Autogenerated by CHEETAH: The Python-Powered Template Engine
    """

    ##################################################
    ## GENERATED METHODS


    def __init__(self, *args, **KWs):
        """
        
        """

        _SkeletonPage.__init__(self, *args, **KWs)
        self._filePath = 'SkeletonPage.tmpl'
        self._fileMtime = 1027982209
        self.updateSettingsFromPySrcStr('''title = 'Skeleton Page Template'
siteDomainName = 'www.CheetahTemplate.org'
siteCopyrightName = 'Tavis Rudd'
siteCredits = 'Designed & Implemented by Tavis Rudd'
metaTags = {'HTTP_EQUIV':{'keywords':'Cheetah,'}, 
            'NAME':{'generator':'Cheetah: The Python-Powered Template Engine'}
            }
bodyTagAttribs = {'text':'black'}
htmlTag = '<html>'
''')

    def writeHeadTag(self,
            trans=None,
            dummyTrans=False,
            VFS=valueFromSearchList,
            VFN=valueForName,
            getmtime=getmtime,
            currentTime=time.time):


        """
        Generated from #block writeHeadTag at line 34, col 1.
        """

        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        write = trans.response().write
        SL = self._searchList
        filter = self._currentFilter
        globalSetVars = self._globalSetVars
        
        ########################################
        ## START - generated method body
        
        write('<head>\n<title>')
        write(filter(VFS(SL,"title",1))) # generated from '$title' at line 36, col 8.
        write('</title>\n')
        write(filter(VFS(SL,"metaTags",1))) # generated from '$metaTags' at line 37, col 1.
        write(' \n')
        write(filter(VFS(SL,"stylesheetTags",1))) # generated from '$stylesheetTags' at line 38, col 1.
        write(' \n')
        write(filter(VFS(SL,"javascriptTags",1))) # generated from '$javascriptTags' at line 39, col 1.
        write('\n</head>\n')
        
        ########################################
        ## END - generated method body
        
        if dummyTrans:
            return trans.response().getvalue()
        else:
            return ""
        

    def writeBody(self,
            trans=None,
            dummyTrans=False,
            VFS=valueFromSearchList,
            VFN=valueForName,
            getmtime=getmtime,
            currentTime=time.time):


        """
        Generated from #block writeBody at line 47, col 1.
        """

        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        write = trans.response().write
        SL = self._searchList
        filter = self._currentFilter
        globalSetVars = self._globalSetVars
        
        ########################################
        ## START - generated method body
        
        write('This skeleton page has no flesh. Its body needs to be implemented.\n')
        
        ########################################
        ## END - generated method body
        
        if dummyTrans:
            return trans.response().getvalue()
        else:
            return ""
        

    def respond(self,
            trans=None,
            dummyTrans=False,
            VFS=valueFromSearchList,
            VFN=valueForName,
            getmtime=getmtime,
            currentTime=time.time):


        """
        This is the main method generated by Cheetah
        """

        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        write = trans.response().write
        SL = self._searchList
        filter = self._currentFilter
        globalSetVars = self._globalSetVars
        
        ########################################
        ## START - generated method body
        
        if exists(self._filePath) and getmtime(self._filePath) > self._fileMtime:
            self.compile(file=self._filePath)
            write(getattr(self, self._mainCheetahMethod_for_SkeletonPage)(trans=trans))
            if dummyTrans:
                return trans.response().getvalue()
            else:
                return ""
        ## START CACHE REGION: at line, col (19, 1) in the source.
        RECACHE = True
        if not self._cacheData.has_key('22264223'):
            self._cacheIndex['header'] = '22264223'
            pass
        else:
            RECACHE = False
        if RECACHE:
            orig_trans = trans
            trans = cacheCollector = DummyTransaction()
            write = cacheCollector.response().write
            write(filter(VFS(SL,"docType",1))) # generated from '$docType' at line 20, col 1.
            write('\n')
            write(filter(VFS(SL,"htmlTag",1))) # generated from '$htmlTag' at line 21, col 1.
            write('''
<!-- This document was autogenerated by Cheetah. Don't edit it directly!

Copyright ''')
            write(filter(VFS(SL,"currentYr",1))) # generated from '$currentYr' at line 24, col 11.
            write(' - ')
            write(filter(VFS(SL,"siteCopyrightName",1))) # generated from '$siteCopyrightName' at line 24, col 24.
            write(' - All Rights Reserved.\nFeel free to copy any javascript or html you like on this site,\nprovided you remove all links and/or references to ')
            write(filter(VFS(SL,"siteDomainName",1))) # generated from '$siteDomainName' at line 26, col 52.
            write('''
However, please do not copy any content or images without permission.

''')
            write(filter(VFS(SL,"siteCredits",1))) # generated from '$siteCredits' at line 29, col 1.
            write('''

-->

''')
            self.writeHeadTag(trans=trans) # generated from ('writeHeadTag', '#block writeHeadTag') at line 34, col 1.
            write('\n')
            trans = orig_trans
            write = trans.response().write
            self._cacheData['22264223'] = cacheCollector.response().getvalue()
            del cacheCollector
        write(self._cacheData['22264223'])
        ## END CACHE REGION
        
        write('\n')
        write(filter(VFS(SL,"bodyTag",1))) # generated from '$bodyTag' at line 45, col 1.
        write('\n\n')
        self.writeBody(trans=trans) # generated from ('writeBody', '#block writeBody') at line 47, col 1.
        write('''
</body>
</html>



''')
        
        ########################################
        ## END - generated method body
        
        if dummyTrans:
            return trans.response().getvalue()
        else:
            return ""
        
    ##################################################
    ## GENERATED ATTRIBUTES


    __str__ = respond

    _mainCheetahMethod_for_SkeletonPage= 'respond'


# CHEETAH was developed by Tavis Rudd, Mike Orr, Ian Bicking and Chuck Esterbrook;
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org

##################################################
## if run from command line:
if __name__ == '__main__':
    SkeletonPage().runAsMainProgram()

