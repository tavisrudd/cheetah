#!/usr/bin/env python
# $Id: SkeletonPage.py,v 1.4 2001/08/08 07:13:49 tavis_rudd Exp $
"""A skeleton page template for use with the Cheetah package

Meta-Data
==========
Author: Tavis Rudd <tavis@calrudd.com>,
Version: $Revision: 1.4 $
Start Date: 2001/04/05
Last Revision Date: $Date: 2001/08/08 07:13:49 $
"""
__author__ = "Tavis Rudd <tavis@calrudd.com>"
__version__ = "$Revision: 1.4 $"[11:-2]

##################################################
## DEPENDENCIES ##

import types, os, sys

# intra-package imports ...
from Cheetah.Servlet import TemplateServlet
import Cheetah.Macros.HTML as HTMLMacros
from Cheetah.Macros.HTML import spacer, currentYr, formHTMLTag, formatMetaTags

##################################################
## GLOBALS AND CONSTANTS ##

True = (1==1)
False = (0==1)

##################################################
## TEMPLATE ELEMENTS ##

templateDef = """$*docType
<HTML>
####################
#block headerComment
<!-- This document was autogenerated by Cheetah. Don't edit it directly!

Copyright #currentYr() - $*siteCopyrightName - All Rights Reserved.
Feel free to copy any javascript or html you like on this site,
provided you remove all links and/or references to $*siteDomainName
However, please do not copy any content or images without permission.

$*siteCredits

-->

#end block headerComment
#####################

#################
#block headTag /#
<HEAD>
<TITLE>$*title</TITLE>
$*metaTags
$*stylesheetTags
$*javascriptTags
</HEAD>
#end block headTag /#
#################


#################
#block bodyTag /#
$bodyTag
#end block bodyTag /#
#################

#block bodyContents /#
This skeleton page has no flesh. Its body needs to be implemented.
#end block bodyContents /#

</BODY>
</HTML>
"""

##################################################
## TEMPLATE SERVLET ##
        
class SkeletonPage(TemplateServlet):
    """A Skeleton HTML page template"""
    
    def __init__(self, templateDef=templateDef, *searchList, **kw):
        
        """Load the Cheetah.Macros.HTML macro library and register self.imgTag()
        as the #imgTag() macro."""
        
        self.loadMacrosFromModule(HTMLMacros)
        self.loadMacro('imgTag', self.imgTag )       
        TemplateServlet.__init__(self, templateDef, *searchList, **kw)
       
    ## Default values for the names embedded in the template ##
    
    docType = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" ' + \
              '"http://www.w3.org/TR/html4/loose.dtd">'

    title = ''
    #_metaTags = {'HTTP_EQUIV':{'test':1234}, 'NAME':{'test':1234,'test2':1234} }
    #_stylesheets = {'.cssClassName':'stylesheetCode'}
    #_stylesheetLibs = {'libName':'libSrcPath'}
    #_javascriptLibs = {'libName':'libSrcPath'}
    bodyTagAttribs = {}
   
    siteDomainName = 'www.example.com'
    siteCredits = 'Designed & Implemented by Tavis Rudd'
    siteCopyrightName = "Tavis Rudd"
   

    def metaTags(self):
        """Return a formatted vesion of the self._metaTags dictionary."""
        if not hasattr(self,'_metaTags'):
            return ''
        else:
            formatMetaTags(self._metaTags)
    
    def stylesheetTags(self):
        """Return a formatted version of the self._stylesheetLibs and
        self._stylesheets dictionaries.  The keys in self._stylesheets must
        be listed in the order that they should appear in the list
        self._stylesheetsOrder, to ensure that the style rules are defined in
        the correct order."""
        
        stylesheetTagsTxt = ''
        if hasattr(self,'_stylesheetLibs'):
            for title, src in self._stylesheetLibs.items():
                stylesheetTagsTxt += '<LINK REL="stylesheet" TYPE="text/css" HREF="' + str(src) + '">\n'
                
        if hasattr(self,'_stylesheets') and hasattr(self,'_stylesheetsOrder'):
            stylesheetTagsTxt += '<STYLE TYPE="text/css"><!--\n'
            for identifier in self._stylesheetsOrder:
                if not self._stylesheets.has_key(identifier):
                    warning = '# the identifier ' + identifier + \
                              'was in self._stylesheetsOrder, but not in self._stylesheets'
                    print warning
                    stylesheetTagsTxt += warning
                    continue
                    
                attribsDict = self._stylesheets[identifier]
                cssCode = ''
                attribCode = ''
                for k, v in attribsDict.items():
                    attribCode += str(k) + ': ' + str(v) + '; '
                attribCode = attribCode[:-2] # get rid of the last semicolon
                
                cssCode = '\n' + identifier + ' {' +  attribCode + '}'
                stylesheetTagsTxt += cssCode
            stylesheetTagsTxt += '\n//--></STYLE>\n'

        return stylesheetTagsTxt.strip()

    def javascriptTags(self):
        
        """Return a formatted version of the self._javascriptTags and
        self._javascriptLibs dictionaries.  Each value in self._javascriptTags
        should be a either a code string to include, or a list containing the
        JavaScript version number and the code string. The keys can be anything.
        The same applies for self._javascriptLibs, but the string should be the
        SRC filename rather than a code string."""
        
        javascriptTagsTxt = []
        if hasattr(self,'_javascriptTags'):
            for key, details in self._javascriptTags.items():
                if type(details) not in (types.ListType, types.TupleType):
                    details = ['',details]

                javascriptTagsTxt += ['<SCRIPT LANGUAGE="JavaScript', str(details[0]),
                                      '" ><!--\n', str(details[0]), '\n//--></SCRIPT>\n']
                
        if hasattr(self,'_javascriptLibs'):
            for key, details in self._javascriptlibs.items():
                if type(details) not in (types.ListType, types.TupleType):
                    details = ['',details]

                javascriptTagsTxt += ['<SCRIPT LANGUAGE="JavaScript', str(details[0]),
                                      '" SRC="', str(details[1]), '">\n']
        return ''.join(javascriptTagsTxt)
    
    def bodyTag(self):
        """Create a body tag from the entries in the dict self._bodyTagAttribs."""
        if not hasattr(self,'bodyTagAttribs'):
            self.bodyTagAttribs = {}

        bodyTagTxt = formHTMLTag('BODY', self.bodyTagAttribs)
        return bodyTagTxt


    def imgTag(self, src, alt='', width=None, height=None, border=0):
        
        """Dynamically generate an image tag.  Cheetah will try to convert the
        src argument to a WebKit serverSidePath relative to the servlet's
        location. If width and height aren't specified they are calculated using
        PIL or ImageMagick if available."""
        
        try:
            src = self.serverSidePath(src)
        except:
            pass
        
        try:
            if not width or not height:
                try:                    # see if the dimensions can be calc'd with PIL
                    import Image
                    im = Image.open(src)
                    calcWidth, calcHeight = im.size
                    del im
                    if not width: width = calcWidth
                    if not height: height = calcHeight

                except:
                    try:                # try imageMagick instead
                        calcWidth, calcHeight = os.popen(
                            'identify -format "%w,%h" ' + src).read().split(',')
                        if not width: width = calcWidth
                        if not height: height = calcHeight
            
                    except:
                        pass
                
            
            return ''.join(['<IMG SRC="', src, '" WIDTH=', str(width), ' HEIGHT=', str(height),
                           ' ALT="', alt, '" BORDER=', str(border), '>'])
        except:
            return ''.join(['<IMG SRC="', src, '" ALT="', alt, '" BORDER=', str(border),'>'])


##################################################
## if run from the command line ##
    
if __name__ == '__main__':
    SkeletonPage().runAsMainProgram()

